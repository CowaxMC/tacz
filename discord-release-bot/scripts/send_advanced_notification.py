#!/usr/bin/env python3
"""
–ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ —Ä–µ–ª–∏–∑–∞—Ö –≤ Discord
"""

import os
import json
import requests
from datetime import datetime

def load_release_data():
    """–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –æ —Ä–µ–ª–∏–∑–µ"""
    try:
        with open('release_data.json', 'r', encoding='utf-8') as f:
            return json.load(f)
    except FileNotFoundError:
        print("–§–∞–π–ª release_data.json –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return {}

def get_github_event_data():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ GitHub —Å–æ–±—ã—Ç–∏—è"""
    github_event_path = os.getenv('GITHUB_EVENT_PATH')
    
    if not github_event_path:
        return {}
    
    try:
        with open(github_event_path, 'r', encoding='utf-8') as f:
            return json.load(f)
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ GitHub —Å–æ–±—ã—Ç–∏—è: {e}")
        return {}

def create_advanced_embed(event_data, release_data):
    """–°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–¥–≤–∏–Ω—É—Ç–æ–≥–æ Discord embed"""
    release = event_data.get('release', {})
    repository = event_data.get('repository', {})
    action = event_data.get('action', 'published')
    
    # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ü–≤–µ—Ç–∞ –∏ —ç–º–æ–¥–∑–∏
    color_map = {
        'published': 0x00ff00,
        'edited': 0xffff00,
        'prereleased': 0xff8800,
        'released': 0x00ff00,
    }
    color = color_map.get(action, 0x0099ff)
    
    emoji_map = {
        'published': 'üöÄ',
        'edited': '‚úèÔ∏è',
        'prereleased': 'üî∂',
        'released': 'üéâ',
    }
    emoji = emoji_map.get(action, 'üì¶')
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ embed
    embed = {
        "title": f"{emoji} {action.title()} Release: {release.get('name', 'Unnamed Release')}",
        "description": release.get('body', '–û–ø–∏—Å–∞–Ω–∏–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'),
        "color": color,
        "url": release.get('html_url', ''),
        "timestamp": release.get('published_at', release.get('created_at', datetime.now().isoformat())),
        "footer": {
            "text": f"Repository: {repository.get('full_name', 'Unknown')}",
            "icon_url": "https://github.githubassets.com/images/modules/logos_page/GitHub-Mark.png"
        },
        "author": {
            "name": release.get('author', {}).get('login', 'Unknown'),
            "url": release.get('author', {}).get('html_url', ''),
            "icon_url": release.get('author', {}).get('avatar_url', '')
        },
        "fields": []
    }
    
    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª–µ–π
    fields = []
    
    # –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
    if release.get('tag_name'):
        fields.append({
            "name": "üè∑Ô∏è Tag",
            "value": release['tag_name'],
            "inline": True
        })
    
    if release.get('author', {}).get('login'):
        fields.append({
            "name": "üë§ Author",
            "value": release['author']['login'],
            "inline": True
        })
    
    if release.get('created_at'):
        created_date = release['created_at'][:10]
        fields.append({
            "name": "üìÖ Created",
            "value": created_date,
            "inline": True
        })
    
    # –°—Ç–∞—Ç—É—Å —Ä–µ–ª–∏–∑–∞
    status_parts = []
    if release.get('prerelease', False):
        status_parts.append("üî∂ Pre-release")
    if release.get('draft', False):
        status_parts.append("üìù Draft")
    
    if status_parts:
        fields.append({
            "name": "‚ö†Ô∏è Status",
            "value": " | ".join(status_parts),
            "inline": True
        })
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–æ–º–º–∏—Ç–æ–≤
    commit_stats = release_data.get('commit_stats', {})
    if commit_stats.get('total_commits'):
        fields.append({
            "name": "üìä Commits",
            "value": str(commit_stats['total_commits']),
            "inline": True
        })
    
    # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏
    repo_info = release_data.get('repository_info', {})
    if repo_info.get('stars'):
        fields.append({
            "name": "‚≠ê Stars",
            "value": str(repo_info['stars']),
            "inline": True
        })
    
    if repo_info.get('language'):
        fields.append({
            "name": "üíª Language",
            "value": repo_info['language'],
            "inline": True
        })
    
    # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –∞—Å—Å–µ—Ç–∞—Ö
    assets_info = release_data.get('assets_info', {})
    if assets_info.get('total_assets'):
        asset_text = f"{assets_info['total_assets']} files"
        if assets_info.get('total_size_mb'):
            asset_text += f" ({assets_info['total_size_mb']} MB)"
        if assets_info.get('total_downloads'):
            asset_text += f" - {assets_info['total_downloads']} downloads"
        
        fields.append({
            "name": "üìÅ Assets",
            "value": asset_text,
            "inline": True
        })
    
    # –°—Å—ã–ª–∫–∏
    links = []
    if release.get('html_url'):
        links.append(f"[üì¶ Release]({release['html_url']})")
    
    if repository.get('html_url'):
        links.append(f"[üè† Repository]({repository['html_url']})")
    
    if links:
        fields.append({
            "name": "üîó Links",
            "value": " | ".join(links),
            "inline": False
        })
    
    # –ö–∞—Å—Ç–æ–º–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    custom_message = os.getenv('CUSTOM_MESSAGE', '')
    if custom_message:
        fields.append({
            "name": "üí¨ Custom Message",
            "value": custom_message,
            "inline": False
        })
    
    embed["fields"] = fields
    
    return embed

def send_discord_notification(embed):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ Discord"""
    webhook_url = os.getenv('DISCORD_WEBHOOK_URL')
    
    if not webhook_url:
        print("DISCORD_WEBHOOK_URL –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        return False
    
    payload = {
        "embeds": [embed],
        "username": "Advanced GitHub Release Bot",
        "avatar_url": "https://github.githubassets.com/images/modules/logos_page/GitHub-Mark.png"
    }
    
    try:
        response = requests.post(webhook_url, json=payload)
        response.raise_for_status()
        print("‚úÖ –ü—Ä–æ–¥–≤–∏–Ω—É—Ç–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ Discord")
        return True
    except requests.exceptions.RequestException as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {e}")
        return False

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("–û—Ç–ø—Ä–∞–≤–∫–∞ –ø—Ä–æ–¥–≤–∏–Ω—É—Ç–æ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Ä–µ–ª–∏–∑–µ –≤ Discord...")
    
    # –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö
    event_data = get_github_event_data()
    release_data = load_release_data()
    
    if not event_data:
        print("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ —Å–æ–±—ã—Ç–∏–∏ GitHub")
        return
    
    # –°–æ–∑–¥–∞–Ω–∏–µ embed
    embed = create_advanced_embed(event_data, release_data)
    
    # –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    success = send_discord_notification(embed)
    
    if success:
        print("‚úÖ –ü—Ä–æ–¥–≤–∏–Ω—É—Ç–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ")
    else:
        print("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ø—Ä–æ–¥–≤–∏–Ω—É—Ç–æ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è")
        exit(1)

if __name__ == "__main__":
    main()
