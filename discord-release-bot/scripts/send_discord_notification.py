#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ —Ä–µ–ª–∏–∑–∞—Ö –≤ Discord —á–µ—Ä–µ–∑ GitHub Actions
"""

import os
import json
import requests
from datetime import datetime

def get_release_data():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –æ —Ä–µ–ª–∏–∑–µ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è GitHub Actions"""
    # –î–∞–Ω–Ω—ã–µ –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ GitHub Actions
    github_event_path = os.getenv('GITHUB_EVENT_PATH')
    
    if not github_event_path:
        print("GITHUB_EVENT_PATH –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return None
    
    try:
        with open(github_event_path, 'r', encoding='utf-8') as f:
            event_data = json.load(f)
        
        # –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —Ä–µ–ª–∏–∑–∞
        release = event_data.get('release', {})
        repository = event_data.get('repository', {})
        
        return {
            'release': release,
            'repository': repository,
            'action': event_data.get('action', 'published')
        }
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö —Å–æ–±—ã—Ç–∏—è: {e}")
        return None

def create_discord_embed(release_data):
    """–°–æ–∑–¥–∞–Ω–∏–µ Discord embed –¥–ª—è —Ä–µ–ª–∏–∑–∞"""
    release = release_data['release']
    repository = release_data['repository']
    action = release_data['action']
    
    # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ü–≤–µ—Ç–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –¥–µ–π—Å—Ç–≤–∏—è
    color_map = {
        'published': 0x00ff00,  # –ó–µ–ª–µ–Ω—ã–π
        'edited': 0xffff00,     # –ñ–µ–ª—Ç—ã–π
        'prereleased': 0xff8800, # –û—Ä–∞–Ω–∂–µ–≤—ã–π
        'released': 0x00ff00,   # –ó–µ–ª–µ–Ω—ã–π
    }
    color = color_map.get(action, 0x0099ff)  # –°–∏–Ω–∏–π –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    
    # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —ç–º–æ–¥–∑–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –¥–µ–π—Å—Ç–≤–∏—è
    emoji_map = {
        'published': 'üöÄ',
        'edited': '‚úèÔ∏è',
        'prereleased': 'üî∂',
        'released': 'üéâ',
    }
    emoji = emoji_map.get(action, 'üì¶')
    
    # –°–æ–∑–¥–∞–Ω–∏–µ embed
    embed = {
        "title": f"{emoji} {action.title()} Release: {release.get('name', 'Unnamed Release')}",
        "description": release.get('body', '–û–ø–∏—Å–∞–Ω–∏–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'),
        "color": color,
        "url": release.get('html_url', ''),
        "timestamp": release.get('published_at', release.get('created_at', datetime.now().isoformat())),
        "footer": {
            "text": f"Repository: {repository.get('full_name', 'Unknown')}"
        },
        "author": {
            "name": release.get('author', {}).get('login', 'Unknown'),
            "url": release.get('author', {}).get('html_url', ''),
            "icon_url": release.get('author', {}).get('avatar_url', '')
        },
        "fields": []
    }
    
    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª–µ–π
    if release.get('tag_name'):
        embed["fields"].append({
            "name": "üì¶ Tag",
            "value": release['tag_name'],
            "inline": True
        })
    
    if release.get('author', {}).get('login'):
        embed["fields"].append({
            "name": "üë§ Author",
            "value": release['author']['login'],
            "inline": True
        })
    
    if release.get('created_at'):
        created_date = release['created_at'][:10]
        embed["fields"].append({
            "name": "üìÖ Created",
            "value": created_date,
            "inline": True
        })
    
    # –°—Ç–∞—Ç—É—Å —Ä–µ–ª–∏–∑–∞
    status_fields = []
    if release.get('prerelease', False):
        status_fields.append("Pre-release")
    if release.get('draft', False):
        status_fields.append("Draft")
    
    if status_fields:
        embed["fields"].append({
            "name": "‚ö†Ô∏è Status",
            "value": " | ".join(status_fields),
            "inline": True
        })
    
    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∞—Å—Å–µ—Ç–∞—Ö
    assets = release.get('assets', [])
    if assets:
        asset_info = []
        for asset in assets[:5]:  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–æ 5 –∞—Å—Å–µ—Ç–æ–≤
            size = asset.get('size', 0)
            size_mb = size / (1024 * 1024)
            asset_info.append(f"‚Ä¢ [{asset['name']}]({asset['browser_download_url']}) ({size_mb:.1f} MB)")
        
        embed["fields"].append({
            "name": "üìÅ Downloads",
            "value": "\n".join(asset_info),
            "inline": False
        })
    
    return embed

def send_discord_notification(embed):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ Discord"""
    webhook_url = os.getenv('DISCORD_WEBHOOK_URL')
    
    if not webhook_url:
        print("DISCORD_WEBHOOK_URL –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        return False
    
    payload = {
        "embeds": [embed],
        "username": "GitHub Release Bot",
        "avatar_url": "https://github.githubassets.com/images/modules/logos_page/GitHub-Mark.png"
    }
    
    try:
        response = requests.post(webhook_url, json=payload)
        response.raise_for_status()
        print("–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ Discord")
        return True
    except requests.exceptions.RequestException as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {e}")
        return False

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("–û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Ä–µ–ª–∏–∑–µ –≤ Discord...")
    
    # –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –æ —Ä–µ–ª–∏–∑–µ
    release_data = get_release_data()
    if not release_data:
        print("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ —Ä–µ–ª–∏–∑–µ")
        return
    
    # –°–æ–∑–¥–∞–Ω–∏–µ Discord embed
    embed = create_discord_embed(release_data)
    
    # –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    success = send_discord_notification(embed)
    
    if success:
        print("‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ")
    else:
        print("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è")
        exit(1)

if __name__ == "__main__":
    main()
