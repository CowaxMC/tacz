name: Discord Notify

on:
  release:
    types: [published, edited, prereleased, released]
  push:
    tags:
      - 'v*'
      - 'release-*'

jobs:
  notify-discord:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
        
    - name: Install dependencies
      run: |
        pip install requests
        
    - name: Send Release Notification
      env:
        DISCORD_WEBHOOK: ${{ secrets.DISCORD_WEBHOOK }}
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        python -c "
        import requests
        import json
        import os
        from datetime import datetime
        
        # –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –æ —Ä–µ–ª–∏–∑–µ
        github_event_path = os.getenv('GITHUB_EVENT_PATH')
        webhook_url = os.getenv('DISCORD_WEBHOOK')
        
        if not github_event_path or not webhook_url:
            print('–ù–µ –Ω–∞–π–¥–µ–Ω—ã –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è')
            exit(1)
        
        # –ß—Ç–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —Å–æ–±—ã—Ç–∏—è
        with open(github_event_path, 'r', encoding='utf-8') as f:
            event_data = json.load(f)
        
        release = event_data.get('release', {})
        repository = event_data.get('repository', {})
        action = event_data.get('action', 'published')
        
        # –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
        release_name = release.get('name', 'Unnamed Release')
        release_url = release.get('html_url', '')
        release_body = release.get('body', '–û–ø–∏—Å–∞–Ω–∏–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç')
        tag_name = release.get('tag_name', '')
        author = release.get('author', {}).get('login', 'Unknown')
        repository_name = repository.get('full_name', 'Unknown')
        
        # –°—Ç–∞—Ç—É—Å —Ä–µ–ª–∏–∑–∞
        status_parts = []
        if release.get('prerelease', False):
            status_parts.append('Pre-release')
        if release.get('draft', False):
            status_parts.append('Draft')
        status_text = f' ({", ".join(status_parts)})' if status_parts else ''
        
        # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        message = (f\"üöÄ **{release_name}**{status_text}\\n\\n\"
                 f\"{release_body}\\n\\n\"
                 f\"**üì¶ Tag:** {tag_name}\\n\"
                 f\"**üë§ Author:** {author}\\n\"
                 f\"**üîó Repository:** {repository_name}\\n\\n\"
                 f\"{release_url}\")
        
        # –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        payload = {
            'content': message
        }
        
        try:
            response = requests.post(webhook_url, json=payload)
            response.raise_for_status()
            print('‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ Discord')
        except Exception as e:
            print(f'‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {e}')
            exit(1)
        "
