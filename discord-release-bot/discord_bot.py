import discord
from discord.ext import commands
import json
import os
from flask import Flask, request, jsonify
import threading
import asyncio

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞
BOT_TOKEN = os.getenv('DISCORD_BOT_TOKEN')
WEBHOOK_URL = os.getenv('DISCORD_WEBHOOK_URL')
CHANNEL_ID = int(os.getenv('DISCORD_CHANNEL_ID', 0))

# –°–æ–∑–¥–∞–Ω–∏–µ –±–æ—Ç–∞
intents = discord.Intents.default()
intents.message_content = True
bot = commands.Bot(command_prefix='!', intents=intents)

# Flask –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è webhook –æ—Ç GitHub
app = Flask(__name__)

class ReleaseNotifier:
    def __init__(self, bot):
        self.bot = bot
        self.channel = None
    
    async def setup_channel(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–∞–Ω–∞–ª–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
        if CHANNEL_ID:
            self.channel = self.bot.get_channel(CHANNEL_ID)
            if not self.channel:
                print(f"–ö–∞–Ω–∞–ª —Å ID {CHANNEL_ID} –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        else:
            print("CHANNEL_ID –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!")
    
    async def send_release_notification(self, release_data):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Ä–µ–ª–∏–∑–µ –≤ Discord"""
        if not self.channel:
            await self.setup_channel()
        
        if not self.channel:
            print("–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∫–∞–Ω–∞–ª –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π")
            return
        
        # –°–æ–∑–¥–∞–Ω–∏–µ embed –¥–ª—è —Ä–µ–ª–∏–∑–∞
        embed = discord.Embed(
            title=f"üöÄ –ù–æ–≤—ã–π —Ä–µ–ª–∏–∑: {release_data['name']}",
            description=release_data.get('body', '–û–ø–∏—Å–∞–Ω–∏–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'),
            color=0x00ff00,
            url=release_data.get('html_url', '')
        )
        
        # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª–µ–π
        embed.add_field(
            name="üì¶ –í–µ—Ä—Å–∏—è", 
            value=release_data.get('tag_name', '–ù–µ —É–∫–∞–∑–∞–Ω–∞'), 
            inline=True
        )
        embed.add_field(
            name="üë§ –ê–≤—Ç–æ—Ä", 
            value=release_data.get('author', {}).get('login', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'), 
            inline=True
        )
        embed.add_field(
            name="üìÖ –î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è", 
            value=release_data.get('created_at', '–ù–µ —É–∫–∞–∑–∞–Ω–∞')[:10], 
            inline=True
        )
        
        # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø—Ä–µ-—Ä–µ–ª–∏–∑–µ
        if release_data.get('prerelease', False):
            embed.add_field(
                name="‚ö†Ô∏è –°—Ç–∞—Ç—É—Å", 
                value="Pre-release", 
                inline=True
            )
        
        # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –¥—Ä–∞—Ñ—Ç–µ
        if release_data.get('draft', False):
            embed.add_field(
                name="üìù –°—Ç–∞—Ç—É—Å", 
                value="Draft", 
                inline=True
            )
        
        # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å—Å—ã–ª–æ–∫ –Ω–∞ –∞—Å—Å–µ—Ç—ã
        assets = release_data.get('assets', [])
        if assets:
            asset_links = []
            for asset in assets[:5]:  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–æ 5 –∞—Å—Å–µ—Ç–æ–≤
                asset_links.append(f"[{asset['name']}]({asset['browser_download_url']})")
            
            if asset_links:
                embed.add_field(
                    name="üìÅ –ó–∞–≥—Ä—É–∑–∫–∏", 
                    value="\n".join(asset_links), 
                    inline=False
                )
        
        # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ footer
        embed.set_footer(text=f"–†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π: {release_data.get('repository', {}).get('full_name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}")
        
        # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ thumbnail (–∞–≤–∞—Ç–∞—Ä –∞–≤—Ç–æ—Ä–∞)
        if release_data.get('author', {}).get('avatar_url'):
            embed.set_thumbnail(url=release_data['author']['avatar_url'])
        
        try:
            await self.channel.send(embed=embed)
            print(f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Ä–µ–ª–∏–∑–µ {release_data['name']} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ")
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {e}")

# –°–æ–∑–¥–∞–Ω–∏–µ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ —É–≤–µ–¥–æ–º–ª—è—Ç–µ–ª—è
release_notifier = ReleaseNotifier(bot)

@bot.event
async def on_ready():
    """–°–æ–±—ã—Ç–∏–µ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –±–æ—Ç–∞"""
    print(f'{bot.user} –ø–æ–¥–∫–ª—é—á–µ–Ω –∫ Discord!')
    await release_notifier.setup_channel()

@bot.command(name='ping')
async def ping(ctx):
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞"""
    await ctx.send('Pong! –ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç!')

@bot.command(name='setup')
async def setup_channel(ctx):
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–∞–Ω–∞–ª–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
    global CHANNEL_ID
    CHANNEL_ID = ctx.channel.id
    release_notifier.channel = ctx.channel
    await ctx.send(f'–ö–∞–Ω–∞–ª {ctx.channel.name} –Ω–∞—Å—Ç—Ä–æ–µ–Ω –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ —Ä–µ–ª–∏–∑–∞—Ö!')

@app.route('/webhook', methods=['POST'])
def github_webhook():
    """Webhook endpoint –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ—Ç GitHub"""
    try:
        # –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –æ—Ç GitHub
        payload = request.get_json()
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∏–ø–∞ —Å–æ–±—ã—Ç–∏—è
        event_type = request.headers.get('X-GitHub-Event')
        
        if event_type == 'release':
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–ª–∏–∑–∞
            release_data = payload.get('release', {})
            
            # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏
            release_data['repository'] = payload.get('repository', {})
            
            # –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ Discord
            asyncio.create_task(release_notifier.send_release_notification(release_data))
            
            return jsonify({'status': 'success', 'message': 'Release notification sent'})
        
        elif event_type == 'push':
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ push (–¥–ª—è —Ç–µ–≥–æ–≤)
            ref = payload.get('ref', '')
            if ref.startswith('refs/tags/'):
                tag_name = ref.replace('refs/tags/', '')
                
                # –°–æ–∑–¥–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —Ä–µ–ª–∏–∑–∞ –∏–∑ push —Å–æ–±—ã—Ç–∏—è
                release_data = {
                    'name': f"Release {tag_name}",
                    'tag_name': tag_name,
                    'body': f"–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π —Ä–µ–ª–∏–∑ –¥–ª—è —Ç–µ–≥–∞ {tag_name}",
                    'author': payload.get('pusher', {}),
                    'created_at': payload.get('head_commit', {}).get('timestamp', ''),
                    'html_url': f"{payload.get('repository', {}).get('html_url', '')}/releases/tag/{tag_name}",
                    'prerelease': False,
                    'draft': False,
                    'repository': payload.get('repository', {})
                }
                
                asyncio.create_task(release_notifier.send_release_notification(release_data))
                
                return jsonify({'status': 'success', 'message': 'Tag release notification sent'})
        
        return jsonify({'status': 'ignored', 'message': f'Event type {event_type} not handled'})
    
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –≤ webhook: {e}")
        return jsonify({'status': 'error', 'message': str(e)}), 500

@app.route('/health', methods=['GET'])
def health_check():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è —Å–µ—Ä–≤–∏—Å–∞"""
    return jsonify({'status': 'healthy', 'bot_ready': bot.is_ready()})

def run_flask():
    """–ó–∞–ø—É—Å–∫ Flask –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    app.run(host='0.0.0.0', port=5000, debug=False)

def run_bot():
    """–ó–∞–ø—É—Å–∫ Discord –±–æ—Ç–∞"""
    if not BOT_TOKEN:
        print("DISCORD_BOT_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!")
        return
    
    bot.run(BOT_TOKEN)

if __name__ == '__main__':
    # –ó–∞–ø—É—Å–∫ Flask –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
    flask_thread = threading.Thread(target=run_flask)
    flask_thread.daemon = True
    flask_thread.start()
    
    # –ó–∞–ø—É—Å–∫ Discord –±–æ—Ç–∞
    run_bot()
