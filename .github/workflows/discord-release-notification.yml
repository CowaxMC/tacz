name: Discord Release Notification

on:
  release:
    types: [published, edited, prereleased, released]
  push:
    tags:
      - 'v*'
      - 'release-*'

jobs:
  notify-discord:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
        
    - name: Install dependencies
      run: |
        pip install requests
        
    - name: Send Release Notification
      env:
        DISCORD_WEBHOOK_URL: ${{ secrets.DISCORD_WEBHOOK_URL }}
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        python -c "
        import requests
        import json
        import os
        from datetime import datetime
        
        # –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –æ —Ä–µ–ª–∏–∑–µ
        github_event_path = os.getenv('GITHUB_EVENT_PATH')
        webhook_url = os.getenv('DISCORD_WEBHOOK_URL')
        
        if not github_event_path or not webhook_url:
            print('–ù–µ –Ω–∞–π–¥–µ–Ω—ã –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è')
            exit(1)
        
        # –ß—Ç–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —Å–æ–±—ã—Ç–∏—è
        with open(github_event_path, 'r', encoding='utf-8') as f:
            event_data = json.load(f)
        
        release = event_data.get('release', {})
        repository = event_data.get('repository', {})
        action = event_data.get('action', 'published')
        
        # –°–æ–∑–¥–∞–Ω–∏–µ embed
        embed = {
            'title': f'üöÄ {action.title()} Release: {release.get(\"name\", \"Unnamed Release\")}',
            'description': release.get('body', '–û–ø–∏—Å–∞–Ω–∏–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'),
            'color': 0x00ff00,
            'url': release.get('html_url', ''),
            'timestamp': release.get('published_at', release.get('created_at', datetime.now().isoformat())),
            'footer': {
                'text': f'Repository: {repository.get(\"full_name\", \"Unknown\")}'
            },
            'author': {
                'name': release.get('author', {}).get('login', 'Unknown'),
                'url': release.get('author', {}).get('html_url', ''),
                'icon_url': release.get('author', {}).get('avatar_url', '')
            },
            'fields': []
        }
        
        # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª–µ–π
        if release.get('tag_name'):
            embed['fields'].append({
                'name': 'üì¶ Tag',
                'value': release['tag_name'],
                'inline': True
            })
        
        if release.get('author', {}).get('login'):
            embed['fields'].append({
                'name': 'üë§ Author',
                'value': release['author']['login'],
                'inline': True
            })
        
        if release.get('created_at'):
            created_date = release['created_at'][:10]
            embed['fields'].append({
                'name': 'üìÖ Created',
                'value': created_date,
                'inline': True
            })
        
        # –°—Ç–∞—Ç—É—Å —Ä–µ–ª–∏–∑–∞
        status_fields = []
        if release.get('prerelease', False):
            status_fields.append('Pre-release')
        if release.get('draft', False):
            status_fields.append('Draft')
        
        if status_fields:
            embed['fields'].append({
                'name': '‚ö†Ô∏è Status',
                'value': ' | '.join(status_fields),
                'inline': True
            })
        
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –∞—Å—Å–µ—Ç–∞—Ö
        assets = release.get('assets', [])
        if assets:
            asset_info = []
            for asset in assets[:5]:
                size = asset.get('size', 0)
                size_mb = size / (1024 * 1024)
                asset_info.append(f'‚Ä¢ [{asset[\"name\"]}]({asset[\"browser_download_url\"]}) ({size_mb:.1f} MB)')
            
            embed['fields'].append({
                'name': 'üìÅ Downloads',
                'value': '\n'.join(asset_info),
                'inline': False
            })
        
        # –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        payload = {
            'embeds': [embed],
            'username': 'GitHub Release Bot',
            'avatar_url': 'https://github.githubassets.com/images/modules/logos_page/GitHub-Mark.png'
        }
        
        try:
            response = requests.post(webhook_url, json=payload)
            response.raise_for_status()
            print('‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ Discord')
        except Exception as e:
            print(f'‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {e}')
            exit(1)
        "