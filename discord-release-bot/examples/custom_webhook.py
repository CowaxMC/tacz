#!/usr/bin/env python3
"""
–ü—Ä–∏–º–µ—Ä –∫–∞—Å—Ç–æ–º–Ω–æ–≥–æ webhook –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ —Ä–µ–ª–∏–∑–∞—Ö
"""

import requests
import json
from datetime import datetime

class CustomDiscordWebhook:
    def __init__(self, webhook_url):
        self.webhook_url = webhook_url
    
    def send_release_notification(self, release_data):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –∫–∞—Å—Ç–æ–º–Ω–æ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Ä–µ–ª–∏–∑–µ"""
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –∫–∞—Å—Ç–æ–º–Ω–æ–≥–æ embed
        embed = {
            "title": f"üéâ –ù–æ–≤—ã–π —Ä–µ–ª–∏–∑: {release_data.get('name', 'Unnamed')}",
            "description": self._format_description(release_data),
            "color": self._get_color_by_type(release_data),
            "url": release_data.get('html_url', ''),
            "timestamp": datetime.now().isoformat(),
            "footer": {
                "text": f"–†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π: {release_data.get('repository', {}).get('full_name', 'Unknown')}",
                "icon_url": "https://github.githubassets.com/images/modules/logos_page/GitHub-Mark.png"
            },
            "author": {
                "name": release_data.get('author', {}).get('login', 'Unknown'),
                "url": release_data.get('author', {}).get('html_url', ''),
                "icon_url": release_data.get('author', {}).get('avatar_url', '')
            },
            "fields": self._create_fields(release_data),
            "thumbnail": {
                "url": release_data.get('author', {}).get('avatar_url', '')
            }
        }
        
        # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
        payload = {
            "embeds": [embed],
            "username": "Custom Release Bot",
            "avatar_url": "https://github.githubassets.com/images/modules/logos_page/GitHub-Mark.png"
        }
        
        try:
            response = requests.post(self.webhook_url, json=payload)
            response.raise_for_status()
            print("‚úÖ –ö–∞—Å—Ç–æ–º–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ")
            return True
        except requests.exceptions.RequestException as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ: {e}")
            return False
    
    def _format_description(self, release_data):
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–ø–∏—Å–∞–Ω–∏—è —Ä–µ–ª–∏–∑–∞"""
        body = release_data.get('body', '')
        if not body:
            return "–û–ø–∏—Å–∞–Ω–∏–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç"
        
        # –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –¥–ª–∏–Ω—ã –æ–ø–∏—Å–∞–Ω–∏—è
        if len(body) > 2000:
            body = body[:1997] + "..."
        
        return body
    
    def _get_color_by_type(self, release_data):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ü–≤–µ—Ç–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ —Ä–µ–ª–∏–∑–∞"""
        if release_data.get('prerelease', False):
            return 0xff8800  # –û—Ä–∞–Ω–∂–µ–≤—ã–π –¥–ª—è pre-release
        elif release_data.get('draft', False):
            return 0x808080  # –°–µ—Ä—ã–π –¥–ª—è draft
        else:
            return 0x00ff00  # –ó–µ–ª–µ–Ω—ã–π –¥–ª—è –æ–±—ã—á–Ω–æ–≥–æ —Ä–µ–ª–∏–∑–∞
    
    def _create_fields(self, release_data):
        """–°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª–µ–π –¥–ª—è embed"""
        fields = []
        
        # –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
        if release_data.get('tag_name'):
            fields.append({
                "name": "üè∑Ô∏è –¢–µ–≥",
                "value": release_data['tag_name'],
                "inline": True
            })
        
        if release_data.get('author', {}).get('login'):
            fields.append({
                "name": "üë§ –ê–≤—Ç–æ—Ä",
                "value": release_data['author']['login'],
                "inline": True
            })
        
        if release_data.get('created_at'):
            created_date = release_data['created_at'][:10]
            fields.append({
                "name": "üìÖ –î–∞—Ç–∞",
                "value": created_date,
                "inline": True
            })
        
        # –°—Ç–∞—Ç—É—Å —Ä–µ–ª–∏–∑–∞
        status_parts = []
        if release_data.get('prerelease', False):
            status_parts.append("üî∂ Pre-release")
        if release_data.get('draft', False):
            status_parts.append("üìù Draft")
        
        if status_parts:
            fields.append({
                "name": "‚ö†Ô∏è –°—Ç–∞—Ç—É—Å",
                "value": " | ".join(status_parts),
                "inline": True
            })
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ä–µ–ª–∏–∑–∞
        stats = []
        if release_data.get('assets'):
            stats.append(f"üìÅ {len(release_data['assets'])} —Ñ–∞–π–ª–æ–≤")
        
        if stats:
            fields.append({
                "name": "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞",
                "value": " | ".join(stats),
                "inline": True
            })
        
        # –°—Å—ã–ª–∫–∏
        links = []
        if release_data.get('html_url'):
            links.append(f"[üì¶ –†–µ–ª–∏–∑]({release_data['html_url']})")
        
        repository = release_data.get('repository', {})
        if repository.get('html_url'):
            links.append(f"[üè† –†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π]({repository['html_url']})")
        
        if links:
            fields.append({
                "name": "üîó –°—Å—ã–ª–∫–∏",
                "value": " | ".join(links),
                "inline": False
            })
        
        return fields

# –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
if __name__ == "__main__":
    # –ü—Ä–∏–º–µ—Ä –¥–∞–Ω–Ω—ã—Ö —Ä–µ–ª–∏–∑–∞
    sample_release = {
        "name": "v2.1.0",
        "tag_name": "v2.1.0",
        "body": "## –ß—Ç–æ –Ω–æ–≤–æ–≥–æ\n- –î–æ–±–∞–≤–ª–µ–Ω–∞ –Ω–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏—è\n- –ò—Å–ø—Ä–∞–≤–ª–µ–Ω—ã –±–∞–≥–∏\n- –£–ª—É—á—à–µ–Ω–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å",
        "author": {
            "login": "developer",
            "html_url": "https://github.com/developer",
            "avatar_url": "https://github.com/developer.png"
        },
        "created_at": "2024-01-15T10:30:00Z",
        "html_url": "https://github.com/user/repo/releases/tag/v2.1.0",
        "prerelease": False,
        "draft": False,
        "assets": [
            {
                "name": "app-v2.1.0.zip",
                "size": 1024000,
                "browser_download_url": "https://github.com/user/repo/releases/download/v2.1.0/app-v2.1.0.zip"
            }
        ],
        "repository": {
            "full_name": "user/repo",
            "html_url": "https://github.com/user/repo"
        }
    }
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è webhook
    webhook = CustomDiscordWebhook("YOUR_WEBHOOK_URL_HERE")
    
    # –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    webhook.send_release_notification(sample_release)
