#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ —Ç–µ–≥–∞—Ö –≤ Discord —á–µ—Ä–µ–∑ GitHub Actions
"""

import os
import json
import requests
from datetime import datetime

def get_tag_data():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –æ —Ç–µ–≥–µ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è GitHub Actions"""
    # –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
    ref = os.getenv('GITHUB_REF', '')
    repository = os.getenv('GITHUB_REPOSITORY', '')
    actor = os.getenv('GITHUB_ACTOR', 'Unknown')
    
    if not ref.startswith('refs/tags/'):
        print("–≠—Ç–æ –Ω–µ —Ç–µ–≥")
        return None
    
    tag_name = ref.replace('refs/tags/', '')
    
    # –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç–µ–≥–µ —á–µ—Ä–µ–∑ GitHub API
    github_token = os.getenv('GITHUB_TOKEN')
    if github_token:
        try:
            headers = {
                'Authorization': f'token {github_token}',
                'Accept': 'application/vnd.github.v3+json'
            }
            
            # –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç–µ–≥–µ
            tag_url = f"https://api.github.com/repos/{repository}/git/refs/tags/{tag_name}"
            response = requests.get(tag_url, headers=headers)
            
            if response.status_code == 200:
                tag_info = response.json()
                # –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–æ–º–º–∏—Ç–µ
                commit_sha = tag_info['object']['sha']
                commit_url = f"https://api.github.com/repos/{repository}/git/commits/{commit_sha}"
                commit_response = requests.get(commit_url, headers=headers)
                
                if commit_response.status_code == 200:
                    commit_info = commit_response.json()
                    return {
                        'tag_name': tag_name,
                        'repository': repository,
                        'actor': actor,
                        'commit_message': commit_info.get('message', ''),
                        'commit_author': commit_info.get('author', {}).get('name', actor),
                        'commit_date': commit_info.get('author', {}).get('date', datetime.now().isoformat()),
                        'commit_url': f"https://github.com/{repository}/commit/{commit_sha}",
                        'tag_url': f"https://github.com/{repository}/releases/tag/{tag_name}"
                    }
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç–µ–≥–µ: {e}")
    
    # Fallback –¥–∞–Ω–Ω—ã–µ
    return {
        'tag_name': tag_name,
        'repository': repository,
        'actor': actor,
        'commit_message': f"Tag {tag_name} created",
        'commit_author': actor,
        'commit_date': datetime.now().isoformat(),
        'commit_url': f"https://github.com/{repository}/releases/tag/{tag_name}",
        'tag_url': f"https://github.com/{repository}/releases/tag/{tag_name}"
    }

def create_discord_embed(tag_data):
    """–°–æ–∑–¥–∞–Ω–∏–µ Discord embed –¥–ª—è —Ç–µ–≥–∞"""
    embed = {
        "title": f"üè∑Ô∏è New Tag: {tag_data['tag_name']}",
        "description": tag_data['commit_message'],
        "color": 0x0099ff,  # –°–∏–Ω–∏–π —Ü–≤–µ—Ç
        "url": tag_data['tag_url'],
        "timestamp": tag_data['commit_date'],
        "footer": {
            "text": f"Repository: {tag_data['repository']}"
        },
        "author": {
            "name": tag_data['commit_author'],
            "url": f"https://github.com/{tag_data['actor']}",
            "icon_url": f"https://github.com/{tag_data['actor']}.png"
        },
        "fields": [
            {
                "name": "üè∑Ô∏è Tag Name",
                "value": tag_data['tag_name'],
                "inline": True
            },
            {
                "name": "üë§ Created by",
                "value": tag_data['actor'],
                "inline": True
            },
            {
                "name": "üìÖ Created",
                "value": tag_data['commit_date'][:10],
                "inline": True
            },
            {
                "name": "üîó Links",
                "value": f"[View Tag]({tag_data['tag_url']}) | [View Commit]({tag_data['commit_url']})",
                "inline": False
            }
        ]
    }
    
    return embed

def send_discord_notification(embed):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ Discord"""
    webhook_url = os.getenv('DISCORD_WEBHOOK_URL')
    
    if not webhook_url:
        print("DISCORD_WEBHOOK_URL –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        return False
    
    payload = {
        "embeds": [embed],
        "username": "GitHub Tag Bot",
        "avatar_url": "https://github.githubassets.com/images/modules/logos_page/GitHub-Mark.png"
    }
    
    try:
        response = requests.post(webhook_url, json=payload)
        response.raise_for_status()
        print("–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Ç–µ–≥–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ Discord")
        return True
    except requests.exceptions.RequestException as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {e}")
        return False

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("–û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Ç–µ–≥–µ –≤ Discord...")
    
    # –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –æ —Ç–µ–≥–µ
    tag_data = get_tag_data()
    if not tag_data:
        print("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ —Ç–µ–≥–µ")
        return
    
    # –°–æ–∑–¥–∞–Ω–∏–µ Discord embed
    embed = create_discord_embed(tag_data)
    
    # –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    success = send_discord_notification(embed)
    
    if success:
        print("‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Ç–µ–≥–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ")
    else:
        print("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Ç–µ–≥–µ")
        exit(1)

if __name__ == "__main__":
    main()
